x <- runif(10, 1, 5)
x
y <- runif(10, 5,10)
y
install.packages("gtools")
library(gtools)
r <- permute(x)
x
r
r <- permute(x)
r
corr_init <- cor(x,y)
# create random variables
x <- runif(10, 1, 5)
y <- runif(10, 1, 5)
corr_init <- cor(x,y) # original correlation
N <- 1000 # initialize number of permutations
count <- 0 # counts correlation greater than corr_init
for (i in 1:N) {
x_perm <- permute(y)
if (cor(x_perm,y) > corr_init) count <- count+1
}
p <- count/N
?factanal
?dcast
install.packages(reshape2)
install.packages("reshape2")
install.packages("plyr")
library(vegan)
bioenv
function.bioenv()
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt", colClasses = c(rep("numeric",2),rep("factor",98)), header = TRUE, row.names = NULL)
View(datafac)
numVar <- ncol(datafac)
model <- MinMod(datafac)
library(minmodlr)
library(minmodelr)
MinMod
testmodel <- glm(day_falling ~. , data = datafac[, 2:numVar])
View(datafac)
names(datafac)[1]
testmodel <- glm("day_falling" ~. , data = datafac[, 2:numVar])
testmodel <- glm(day_falling ~. , data = datafac[, 2:numVar])
str(datafac[,1])
str(datafac[,2])
str(datafac[,3])
testmodel <- glm(datafac[, 1] ~. , data = datafac[, 2:numVar])
summary(testmodel)
levels(datafac[, 3])
levels(datafac[, 4])
levels(datafac[, 5])
levels(datafac[, 6])
testmodel
library(devtools)
install_github("Hadley","devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("devtools", "hadley")
install_github("minmodelr","Thinkmarti")
library(minmodelr)
?minmodelr
??minmodelr
help(package:minmodelr)
help(package = "minmodelr")
MinMod
datafac <- read.table("C:/Users/Martin/Studium/Ophionotus/files/Ophionotus_GLM_4.txt",
colClasses = c(rep("numeric",2),rep("factor",98)), header = TRUE, row.names = NULL)
library(glmulti)
?glmulti
View(datafac)
models <- glmulti(day_falling ~., data = datafac, method = "d")
models <- glmulti(day_falling ~., data = datafac, method = "g")
models <- glmulti(day_falling ~., data = datafac, method = "g", level=1)
models <- glmulti(day_falling ~., data = subset(datafac, select = 1:20), method = "g", level=1)
str(models)
bestmodel <- models$formulas[1]
bestmodel <- models$@formulas[1]
summery(bestmodel)$generations
summary(bestmodel)$generations
summary(models)$generations
models$formulas[[1]]
models$@formulas[[1]]
models@formulas[[1]]
models@formulas[[2]]
models@formulas[[3]]
models@formulas[[4]]
models@formulas[[5]]
install_github("minmodelr","Thinkmarti")
help(package = minmodelr)
data(cars)
cars
data(ToothGrowth)
TG <- data(ToothGrowth)
ToothGrowth
View(ToothGrowth)
data(mtcars)
mtcars
library(hflights)
dim(hflights)
head(hflights)
?tbl_df
hflights_df <- tbl(hflights)
library(dplyr)
hflights_df <- tbl_df(hflights)
?tbl_df
hflights_df
filter(hflights_df, Month == 1, DayofMonth == 1)
filter(hflights_df, Month == 1 | Month == 2)
arrange(hflights_df, DepTime)
arrange(hflights_df, -DepTime)
arrange(hflights_df, DepTime)
select(hflights_df, UniqueCarrier)
select(hflights_df, FlightNum)
arrange(hflights_df, Month)
select(hflights_df, FlightNum)
select(hflights_df, -(DepTime:AirTime))
?%>%
filter(arr > 30 | dep >30)
hflights %>%
group_by(Year, Month) %>%
select(Year:DayofMonth) %>%
summarise(
arr = mean(ArrDelay, na.rm = TRUE),
dep = mean(DepDelay, na.rm = TRUE)
) %>%
filter(arr > 30 | dep >30)
hflights
head(hflights)
hflights %>%
group_by(Year, Month) %>%
select(Year:TaxiIn) %>%
summarise(
arr = mean(ArrDelay, na.rm = TRUE),
dep = mean(DepDelay, na.rm = TRUE)
) %>%
filter(arr > 30 | dep >30)
hflights %>%
group_by(Year, Month, DayofMonth) %>%
select(Year:DayofMonth, ArrDelay, DepDelay) %>%
summarise(
arr = mean(ArrDelay, na.rm = TRUE),
dep = mean(DepDelay, na.rm = TRUE)
) %>%
filter(arr > 30 | dep > 30)
View(mtcars)
genotypes <- read.table(".\\txt\\raw_41loci_ordered.txt", na.strings = "NA", row.names = 1)
setwd("C:/Users/Martin/Studium/projects/sealscent/Rscripts/g2")
data <- read.table("raw_41loci_ordered.txt", row.names = 1)
# turn data into 0 (homozygote), 1 (heterozygote) or -1 (NA on one locus)
checkhet <- function(x) {
s1 <- seq(1, length(x), 2)
newx <- as.vector(rep(NA, length(x)/2))
count <- 1
for(i in s1){
if (is.na(x[i] | x[i + 1])) {
newx[count] = -1
count = count + 1
} else if (x[i] == x[i + 1]) {
newx[count] = 0
count = count + 1
} else if (x[i] != x[i + 1]) {
newx[count] = 1
count = count + 1
}
}
newx
}
# original full data matrix
origin <- apply(data, 1, checkhet)
# define matrix with 1 for missing and 0 for all others
m <- origin
m[m==1] <- 0
m[m==-1] <- 1
# H matrix with 0 for -1
h <- origin
h[h==-1] <- 0
n <- ncol(origin) # number of individuals
l <- nrow(origin) # number of loci
# mij: proportion of individuals missing on i and j Â´s locus
mtemp <- m %*% t(m)
m_ij <- mtemp/n
# vector with rowsums
m_loc_temp <- apply(m, 1, sum)
m_loc <- m_loc_temp / n
# numerator --------------------------------------------------------------------
# pij entry says total amount of individuals that het locus i and locus j
p <- h %*% t(h)
numerator <- 0
missmat <- matrix(rep(0, l*l), ncol = l)
for (i in seq(1:nrow(h))){
for (j in seq(1:nrow(h))[-i]){
missmat[i,j]  <- 1/ (n * (1 - m_loc[i] - m_loc[j] + m_ij[i,j]))
}
}
numerator_mat <- p * missmat
numerator <- sum(numerator_mat)
# denominator-------------------------------------------------------------------
denominator_mat <- matrix(rep(0, l*l), ncol = l)
missmat2 <- matrix(rep(0, l*l), ncol = l)
# sum over loci
for (i in seq(1:nrow(h))){
for (j in seq(1:nrow(h))[-i]){
missmat2[i,j] <- 1/(((n * (n - 1) * (1 - m_loc[i] - m_loc[j] + m_loc[i] * m_loc[j]))) -
(n * (m_ij[i, j] - m_loc[i] * m_loc[j])))
}
}
nullmat <- matrix(rep(1, n*n), ncol=n)
diag(nullmat) <- 0
q <- h %*% (nullmat %*% t(h))
denominator_mat <- missmat2 * q
denominator <- sum(denominator_mat)
g2 <- (numerator / denominator) - 1
